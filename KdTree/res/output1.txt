See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (3 warnings)
PMD:          FAILED (5 warnings)
Checkstyle:   FAILED (0 errors, 76 warnings)

Correctness:  25/36 tests passed
Memory:       16/16 tests passed
Timing:       35/42 tests passed

Aggregate score: 78.33%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 12K Oct 25 17:56 KdTree.java
2.6K Oct 25 17:56 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'contains1()' is never called.  At KdTree.java:[lines 58-67]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'setHeadNode()' is never called.  At KdTree.java:[lines 20-21]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'getHeadNode()' is never called.  At KdTree.java:[line 16]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:15: Avoid unused private methods, such as 'getHeadNode()'. [UnusedPrivateMethod]
KdTree.java:19: Avoid unused private methods, such as 'setHeadNode(Node)'. [UnusedPrivateMethod]
KdTree.java:57: Avoid unused private methods, such as 'contains1(Point2D)'. [UnusedPrivateMethod]
KdTree.java:177: The private instance (or static) variable 'parent' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:11: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 5 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:11:13: Redundant 'static' modifier. [RedundantModifier]
[WARN] KdTree.java:11:35: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:11:55: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:24:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] KdTree.java:43:18: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:43:32: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:59:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:59:23: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:60:15: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:63:19: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:72:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:72:23: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:75:18: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:75:47: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:78:19: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:93:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:93:23: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:100:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:100:25: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:110:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:115:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:115:29: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:118:18: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:118:47: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:120:19: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:120:54: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:123:19: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:123:41: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:124:23: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:124:70: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:125:23: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:125:72: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:127:23: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:127:70: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:128:23: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:128:72: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:135:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:141:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:141:29: '{' is not preceded with whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 75 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:103:34: The numeric literal '0.002' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==> passed

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 3 of 5
    - student   size()    = 3
    - reference size()    = 2
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  0.0 0.0
      B  1.0 1.0
      C  1.0 1.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 6 of 10
    - student   size()    = 6
    - reference size()    = 5
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  1.0 0.75
      B  1.0 0.5
      C  0.75 0.0
      D  0.0 0.0
      E  0.25 0.5
      F  0.25 0.5

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 7 of 50
    - student   size()    = 7
    - reference size()    = 6
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  0.25 0.625
      B  0.875 0.125
      C  0.625 0.25
      D  0.25 0.25
      E  0.125 0.25
      F  0.375 0.0
      G  0.625 0.25

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 20 of 100000
    - student   size()    = 20
    - reference size()    = 19
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  0.25 0.3125
      B  0.4375 0.3125
      C  0.5625 0.75
      D  0.0625 0.625
      E  1.0 0.625
      F  0.8125 0.0625
      G  0.0625 0.875
      H  0.6875 0.125
      I  0.375 0.6875
      J  0.4375 1.0
      K  0.0 0.9375
      L  0.0 0.0
      M  0.875 0.125
      N  0.375 0.875
      O  0.1875 0.5625
      P  1.0 1.0
      Q  0.25 0.5625
      R  0.3125 0.4375
      S  0.875 0.9375
      T  0.0 0.0

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 249 of 100000
    - student   size()    = 249
    - reference size()    = 248
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 2377 of 100000
    - student   size()    = 2377
    - reference size()    = 2376
    - student   isEmpty() = false
    - reference isEmpty() = false

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 37 of 10000
    - query point          = (0.625, 0.625)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  0.75 0.375
      B  0.0 0.0
      C  0.25 0.875
      D  0.625 0.625
      E  0.75 0.875
      F  1.0 0.625
      G  0.0 1.0
      H  0.125 1.0
      I  0.75 0.5
      J  0.5 0.0
      K  0.875 0.75
      L  1.0 0.375
      M  0.125 0.75
      N  0.75 0.25
      O  0.5 0.125
      P  0.625 0.875
      Q  0.125 0.375
      R  0.25 0.625
      S  0.0 0.25
      T  0.25 1.0

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 2 of 10000
    - query point          = (0.46875, 0.640625)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 62 of 10000
    - query point          = (0.1494140625, 0.2509765625)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 65536-by-65536 grid
==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
    - failed on trial 5 of 10000
    - query point          = (0.0, 1.0)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 16-by-16 grid
    - failed on trial 4 of 10000
    - query point          = (0.9375, 0.4375)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 20 of 10000
    - query point          = (0.5625, 0.5546875)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 787 of 10000
    - query point          = (0.6787109375, 0.25)
    - student   contains() = false
    - reference contains() = true

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.125, 0.5] x [0.75, 1.0]
    - sequence of points inserted:
      A  1.0 0.0
      B  0.0 0.375
      C  0.125 0.125
      D  0.0 0.25
      E  1.0 0.875
      F  0.375 0.5
      G  0.75 0.25
      H  0.75 0.375
      I  1.0 0.75
      J  0.875 0.875
      K  0.125 0.5
      L  0.25 0.75
      M  0.0 0.125
      N  0.375 0.375
      O  0.625 0.875
      P  0.5 0.5
      Q  0.375 0.0
      R  0.875 0.0
      S  0.625 0.375
      T  0.875 0.5
    - student   range():  empty
    - reference range():  L

  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.625, 0.6875] x [0.46875, 0.953125]
    - student   range():  J O N V Z R A L X S O M X O Z B E J B P Y S M L T Z ...
    - reference range():  A N J I W P Q T B H S Z H L M T B J P Y O E Z B O X ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.3203125, 0.6640625] x [0.09375, 0.9921875]
    - student   range():  G E S B L M W H N T R E P P C S L M W Q X A V V A E ...
    - reference range():  C K E F O N G W W J U U U B R U F E U D H K C Y E B ...

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.6875, 0.8125] x [0.125, 0.875]
    - student   range():  O Q E W U N E F I N E E O Y C X
    - reference range():  O O Y Z C X Y I Q D N C K I E J F U I Z N W W L C U ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5625, 0.5625] x [0.21875, 0.625]
    - student   range():  T D I W I B Q E Q
    - reference range():  E Q Q B B I D W I T V

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0400390625, 0.5234375] x [0.6640625, 0.83203125]
    - student   range():  B O W H Y X E J C W G S Q W W M S N L N S Q Q T C H ...
    - reference range():  B J Q L Z F G R V X C O Y I V H Z C R I B G X P R I ...

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 12 of 10000
    - sequence of points inserted:
      A  0.375 0.625
      B  0.0 1.0
      C  0.8125 0.9375
      D  0.0625 0.125
      E  0.375 0.0625
      F  0.25 0.875
      G  0.5 0.6875
      H  0.8125 0.375
      I  0.5625 0.625
      J  0.375 0.8125
      K  0.25 0.375
      L  0.625 0.4375
      M  0.25 0.25
      N  1.0 0.5625
      O  0.4375 0.1875
      P  0.25 0.1875
      Q  0.125 0.9375
      R  0.1875 0.875
      S  0.875 0.375
      T  0.9375 0.1875
    - query point                   = (0.125, 0.25)
    - student   nearest()           = (0.0625, 0.125)
    - reference nearest()           = (0.25, 0.25)
    - student   distanceSquaredTo() = 0.01953125
    - reference distanceSquaredTo() = 0.015625

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 10 of 10000
    - query point                   = (0.15625, 0.0625)
    - student   nearest()           = (0.0625, 0.15625)
    - reference nearest()           = (0.15625, 0.125)
    - student   distanceSquaredTo() = 0.017578125
    - reference distanceSquaredTo() = 0.00390625

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 501 of 10000
    - query point                   = (0.672760009765625, 0.8412322998046875)
    - student   nearest()           = (0.6803131103515625, 0.8374786376953125)
    - reference nearest()           = (0.6681060791015625, 0.8403472900390625)
    - student   distanceSquaredTo() = 0.000071139307693
    - reference distanceSquaredTo() = 0.000022442312911

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 4 of 10000
    - query point                   = (0.9375, 0.5625)
    - student   nearest()           = (1.0, 0.5625)
    - reference nearest()           = (0.9375, 0.5625)
    - student   distanceSquaredTo() = 0.00390625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point                   = (0.203125, 0.375)
    - student   nearest()           = (0.203125, 0.359375)
    - reference nearest()           = (0.203125, 0.3671875)
    - student   distanceSquaredTo() = 0.000244140625
    - reference distanceSquaredTo() = 0.00006103515625

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 5 of 10000
    - query point                   = (0.9169921875, 0.3525390625)
    - student   nearest()           = (0.892578125, 0.3466796875)
    - reference nearest()           = (0.9208984375, 0.35546875)
    - student   distanceSquaredTo() = 0.000630378723145
    - reference distanceSquaredTo() = 0.00002384185791

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.38, 0.03)
    - student   nearest()           = (0.2, 0.3)
    - reference nearest()           = (0.2, 0.3)
    - student   distanceSquaredTo() = 0.1053
    - reference distanceSquaredTo() = 0.1053
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A E B C
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B C E

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.28, 0.56)
    - student   nearest()           = (0.226, 0.577)
    - reference nearest()           = (0.226, 0.577)
    - student   distanceSquaredTo() = 0.003205
    - reference distanceSquaredTo() = 0.003205
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B H I C F D
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C D F

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.75 0.875
      B  0.625 0.5
      C  0.125 0.75
      D  0.5 1.0
      E  0.875 0.125
    - query point                   = (0.375, 0.0)
    - student   nearest()           = (0.875, 0.125)
    - reference nearest()           = (0.875, 0.125)
    - student   distanceSquaredTo() = 0.265625
    - reference distanceSquaredTo() = 0.265625
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A E B C D
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B C D E

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - do not compute the distance between the query point and the point in a node
      if the closest point discovered so far is closer than the distance between
      the query point and the rectangle corresponding to the node

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.15625 0.0625
      B  0.40625 0.375
      C  1.0 0.1875
      D  0.59375 0.34375
      E  0.03125 0.25
      F  0.25 0.71875
      G  0.625 0.84375
      H  0.75 0.75
      I  0.125 0.875
      J  0.6875 1.0
      K  0.3125 0.46875
      L  0.21875 0.09375
      M  0.0 0.125
      N  0.34375 0.21875
      O  0.9375 0.96875
      P  0.0625 0.6875
      Q  0.53125 0.03125
      R  0.875 0.53125
      S  0.71875 0.28125
      T  0.5625 0.65625
    - query point                   = (0.78125, 0.4375)
    - student   nearest()           = (0.875, 0.53125)
    - reference nearest()           = (0.875, 0.53125)
    - student   distanceSquaredTo() = 0.017578125
    - reference distanceSquaredTo() = 0.017578125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B F G H R K T C D L N S E
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B F G H R K T C D L N S

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 25
    - number of reference entries = 14
    - entry 2 of the two sequences are not equal
    - student   entry 2 = (0.625, 0.984375)
    - reference entry 2 = (0.765625, 0.765625)

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 20
    - number of reference entries = 9
    - entry 3 of the two sequences are not equal
    - student   entry 3 = (0.78125, 0.9765625)
    - reference entry 3 = (0.390625, 0.5390625)

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 48
    - number of reference entries = 10
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.9130859375, 0.5751953125)
    - reference entry 1 = (0.8427734375, 0.28173828125)

==> FAILED

Test 7: insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed

Test 8a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 8b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 25 of 20000
    - student   nearest()  = (0.625, 0.4375)
    - reference nearest()  = (0.125, 0.625)
    - student   distanceSquaredTo() = 0.42578125
    - reference distanceSquaredTo() = 0.15625
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()  ==>  0
           st.insert(1.0, 0.375)
           st.insert(0.0, 0.9375)
           st.insert(0.9375, 0.375)
           st.range([0.0625, 0.4375] x [0.25, 0.875])  ==>  empty
           st.insert(0.125, 0.9375)
           st.range([0.1875, 0.5625] x [0.6875, 0.9375])  ==>  empty
           st.contains((0.5625, 0.9375))  ==>  false
           st.range([0.0, 0.3125] x [0.25, 0.375])  ==>  empty
           st.isEmpty()  ==>  false
           st.insert(0.75, 0.0625)
           st.contains((0.25, 0.875))  ==>  false
           st.nearest((0.3125, 0.25))   ==>  (0.75, 0.0625)
           st.range([0.625, 0.9375] x [0.125, 0.75])  ==>  M
           st.nearest((0.0625, 1.0))   ==>  (0.0, 0.9375)
           st.insert(0.125, 0.625)
           st.contains((0.6875, 0.0))  ==>  false
           st.contains((0.1875, 0.5))  ==>  false
           st.insert(0.4375, 0.0625)
           st.nearest((0.25, 0.4375))   ==>  (0.125, 0.625)
           st.insert(0.75, 0.375)
           st.insert(0.625, 0.4375)
           st.insert(0.5, 0.8125)
           st.nearest((0.0, 0.25))   ==>  (0.625, 0.4375)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 279 of 20000
    - rectangle = [0.40625, 0.6640625] x [0.1015625, 0.46875]
    - student   range():  K D W V I X T B G Y D
    - reference range():  D T D G G Y B V I X W K

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 496 of 20000
    - rectangle = [0.2705078125, 0.724609375] x [0.4326171875, 0.759765625]
    - student   range():  F M Z A A F T R S M Z A T W D I T W U
    - reference range():  M A U T W D T W I Z A S F R T F M Z A G Y

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5758 of 20000
    - rectangle = [0.13720703125, 0.439453125] x [0.1751708984375, 0.915283203125]
    - student   range():  Q J X J F G H H L N E X F U I L S Q J H T Y L S E T ...
    - reference range():  Q W L T G H W T X C A X M J E K T U C E T Q P X E R ...

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> FAILED

Test 8c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 76 of 20000
    - student   size() = 19
    - reference size() = 4

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 99 of 20000
    - rectangle = [0.25, 1.0] x [0.4375, 0.6875]
    - student   range():  Z G K G Q S
    - reference range():  Z K S Q G G B

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 163 of 20000
    - rectangle = [0.46875, 0.6953125] x [0.3046875, 0.96875]
    - student   range():  R H W P R Y Z I
    - reference range():  R P Z I R W Y H W

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 1558 of 20000
    - rectangle = [0.4033203125, 0.712890625] x [0.6865234375, 0.9677734375]
    - student   range():  W V I A L X M M W X Q B Y K E U G A K F I I S A K N ...
    - reference range():  U E W T I I N B J Q O W Q V B L D F D L G C V A K I ...

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 8481 of 20000
    - rectangle = [0.1474609375, 0.5252685546875] x [0.0865478515625, 0.5460205078125]
    - student   range():  H L P I R W Q M W B M W B E Y O A C Q X Z Z S Q X V ...
    - reference range():  F R C W U Y Y U T X W M F O D N K S H X A Z B I Q M ...

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 7017 of 20000
    - rectangle = [0.3990325927734375, 0.8621063232421875] x [0.2294769287109375, 0.6880340576171875]
    - student   range():  P H T V Y R G N D D D X V T P V F T U I O Q N A A L ...
    - reference range():  P R V R K F I O Y U B Z N R V E R Z M L R U E N M Y ...

==> FAILED

Test 9: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
==> passed

Test 10: check that two KdTree objects can be created at the same time
==> passed

Test 11: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed


Total: 17/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                264
=> passed        2          336                360
=> passed        5          624                648
=> passed       10         1104               1128
=> passed       25         2544               2568
=> passed      100         9744               9768
=> passed      400        38544              38568
=> passed      800        76944              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          288                160
=> passed        2          552                288
=> passed        5         1008                672
=> passed       10         1768               1312
=> passed       25         4048               3232
=> passed      100        15448              12832
=> passed      400        61048              51232
=> passed      800       121848             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 152.02 n + 236.39  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1186737
=> passed   320000    1245303
=> passed   640000     987938
=> passed  1280000     630264
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     307684
=> passed   320000     309862
=> passed   640000     280203
=> passed  1280000     258602
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5056
=> passed    20000       1741
=> passed    40000        711
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4547
=> passed    20000       2121
=> passed    40000        842
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     618062               1.5              48.0              45.5              21.6
=> passed   320000     536474               1.5              48.8              46.3              22.0
=> passed   640000     546173               1.5              51.8              49.3              23.5
=> passed  1280000     489832               1.5              56.0              53.5              25.6
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     368138              18.5              17.5              18.0
=> passed    20000     371696              19.7              18.7              19.2
=> passed    40000     357713              21.8              20.8              21.3
=> passed    80000     325710              22.0              21.0              21.5
=> passed   160000     252584              23.2              22.2              22.7
=> passed   320000     234221              25.0              24.0              24.5
=> passed   640000     303738              25.7              24.7              25.2
=> passed  1280000     195161              27.2              26.2              26.7
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     245589               0.0              31.1              81.9              42.5
=> passed    20000     245988               0.0              32.6              85.9              48.8
=> passed    40000     212891               0.0              39.3             103.2              52.7
=> passed    80000     183490               0.0              40.7             106.5              55.0
=> passed   160000     131187               0.0              42.5             113.1              63.2
=> passed   320000     124881               0.0              40.2             105.7              55.7
=> passed   640000     104177               0.0              43.3             113.8              62.6
=> passed  1280000      92862               0.0              47.0             123.0              60.1
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000    85231                 147.5                  210.6                   439.1             449.0
=> FAILED    20000    52116                 255.3                  362.1   (1.2x)          744.3             758.6
=> FAILED    40000    41856                 279.8                  397.4   (1.3x)          833.6             836.3
=> FAILED    80000    24609   (0.8x)        444.6                  627.8   (2.1x)         1289.0   (1.6x)   1317.4   (1.6x)
=> FAILED   160000    24051   (0.8x)        448.0                  635.5   (2.1x)         1328.5   (1.7x)   1311.7   (1.6x)
=> FAILED   320000    11553   (0.6x)        680.2   (1.1x)         956.5   (3.2x)         1980.8   (2.5x)   1958.9   (2.4x)
=> FAILED   640000     6067   (0.3x)        763.2   (1.3x)        1074.0   (3.6x)         2204.6   (2.8x)   2238.8   (2.8x)
=> FAILED  1280000    10450   (0.5x)        922.5   (1.5x)        1297.4   (4.3x)         2704.6   (3.4x)   2656.7   (3.3x)
==> 1/8 tests passed



Total: 21/28 tests passed!


================================================================



