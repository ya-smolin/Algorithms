See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (2 warnings)
PMD:          FAILED (4 warnings)
Checkstyle:   FAILED (0 errors, 73 warnings)

Correctness:  25/36 tests passed
Memory:       16/16 tests passed
Timing:       35/42 tests passed

Aggregate score: 78.33%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 11K Oct 25 17:22 KdTree.java
2.6K Oct 25 17:22 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'setHeadNode()' is never called.  At KdTree.java:[lines 20-21]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'getHeadNode()' is never called.  At KdTree.java:[line 16]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
KdTree.java:15: Avoid unused private methods, such as 'getHeadNode()'. [UnusedPrivateMethod]
KdTree.java:19: Avoid unused private methods, such as 'setHeadNode(Node)'. [UnusedPrivateMethod]
KdTree.java:156: The private instance (or static) variable 'parent' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PointSET.java:11: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTree.java:11:13: Redundant 'static' modifier. [RedundantModifier]
[WARN] KdTree.java:11:35: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] KdTree.java:11:55: '}' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:24:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] KdTree.java:43:18: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:43:32: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:59:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:59:23: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:60:15: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:63:19: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:72:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:72:23: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:79:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:79:25: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:89:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:94:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:94:29: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:97:18: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:97:47: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:99:19: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:99:54: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:102:19: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:102:41: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:103:23: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:103:70: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:104:23: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:104:72: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:106:23: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:106:70: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:107:23: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:107:72: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:114:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:120:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:120:29: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:126:18: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:126:47: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:129:19: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] KdTree.java:129:48: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] KdTree.java:133:19: 'if' is not followed by whitespace. [WhitespaceAfter]
...
Checkstyle ends with 0 errors and 70 warnings.

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:63:25: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] PointSET.java:64:44: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:82:34: The numeric literal '0.002' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 2: check isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: insert n random points and check contains() for n random query points
  * 100000 random points in a 65536-by-65536 grid
  * 100000 random points in a 8192-by-8192 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 128-by-128 grid
  * 100000 random points in a 16-by-16 grid
==> passed

Test 4: insert n random points and check nearest() for n random query points
  * 1000 random points in a 65536-by-65536 grid
  * 1000 random points in a 8192-by-8192 grid
  * 1000 random points in a 1024-by-1024 grid
  * 1000 random points in a 128-by-128 grid
  * 1000 random points in a 16-by-16 grid
==> passed

Test 5: insert n random points and check range() for n random query rectangles
  * 1000 random rectangles and points in a 65536-by-65536 grid
  * 1000 random rectangles and points in a 8192-by-8192 grid
  * 1000 random rectangles and points in a 1024-by-1024 grid
  * 1000 random rectangles and points in a 128-by-128 grid
  * 1000 random rectangles and points in a 16-by-16 grid
==> passed

Test 6: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: check whether two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 3 of 5
    - student   size()    = 3
    - reference size()    = 2
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  1.0 0.0
      B  1.0 1.0
      C  1.0 1.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 4 of 10
    - student   size()    = 4
    - reference size()    = 3
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  0.0 0.5
      B  0.75 1.0
      C  0.25 1.0
      D  0.75 1.0

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 6 of 50
    - student   size()    = 6
    - reference size()    = 5
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  0.375 0.375
      B  0.125 0.125
      C  0.0 0.25
      D  1.0 0.125
      E  1.0 0.75
      F  0.0 0.25

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 7 of 100000
    - student   size()    = 7
    - reference size()    = 6
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted:
      A  0.3125 0.25
      B  0.1875 0.8125
      C  0.3125 0.125
      D  1.0 0.9375
      E  0.3125 0.5625
      F  0.0 0.75
      G  0.1875 0.8125

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 59 of 100000
    - student   size()    = 59
    - reference size()    = 58
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 645 of 100000
    - student   size()    = 645
    - reference size()    = 644
    - student   isEmpty() = false
    - reference isEmpty() = false

==> FAILED

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 5 of 10000
    - query point          = (0.0, 0.75)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  0.0 1.0
      B  0.25 0.0
      C  0.75 0.75
      D  0.0 0.75
      E  0.75 0.5
      F  0.0 0.25
      G  0.5 0.25
      H  0.0 0.5
      I  0.25 1.0
      J  0.25 0.75

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 80 of 10000
    - query point          = (0.375, 0.875)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted:
      A  0.0 0.125
      B  1.0 0.875
      C  0.125 0.0
      D  0.25 0.375
      E  0.625 0.875
      F  0.375 1.0
      G  0.375 0.875
      H  0.375 0.125
      I  0.625 0.25
      J  0.25 0.75
      K  0.625 0.625
      L  0.5 0.375
      M  0.375 0.0
      N  0.5 0.5
      O  0.25 1.0
      P  0.75 0.75
      Q  0.0 0.25
      R  1.0 0.25
      S  0.125 0.125
      T  0.625 1.0

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.0078125, 0.640625)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 27 of 10000
    - query point          = (0.4658203125, 0.357421875)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 65536-by-65536 grid
==> FAILED

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
    - failed on trial 3 of 10000
    - query point          = (0.0, 1.0)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.0625, 0.0625)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 4 of 10000
    - query point          = (0.140625, 0.46875)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 382 of 10000
    - query point          = (0.396484375, 0.3349609375)
    - student   contains() = false
    - reference contains() = true

==> FAILED

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5, 0.75] x [0.0, 0.75]
    - sequence of points inserted:
      A  1.0 0.25
      B  0.0 0.75
      C  1.0 0.75
      D  0.75 1.0
      E  0.0 0.0
      F  0.5 0.5
      G  1.0 0.5
      H  0.25 0.25
      I  0.25 0.75
      J  0.0 1.0
    - student   range():  empty
    - reference range():  F

  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.625, 0.6875] x [0.25, 0.8125]
    - student   range():  U G V P Q B
    - reference range():  B Q P U G V R

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.109375, 0.9375] x [0.3125, 0.375]
    - student   range():  H H U O G G V I K B Z E R Q F Z X D A Q W M S G C B ...
    - reference range():  M D X W O E Y M Y I W A E I L A U P C D O X H O C U ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.4140625, 0.796875] x [0.3046875, 0.890625]
    - student   range():  F I R Q M N U Y G Z F Q P G B K Z Q T P F R N R J L ...
    - reference range():  S M N E K D S N N V J K D D L F L R E J G L J C I W ...

==> FAILED

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [1.0, 1.0] x [0.0, 1.0]
    - student   range():  G
    - reference range():  G A H

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0625, 0.9375] x [0.6875, 1.0]
    - student   range():  E S Y D X A
    - reference range():  X A L X H J I F I W L X Q L A L R G Q E Z H S M V I ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.6640625, 0.6875] x [0.265625, 0.59375]
    - student   range():  O F W F J A S V A Z H X X P R I W V X D F Z J W R
    - reference range():  P Z R J W O A X D Z X P R I V W H V T K X X F J T Z ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.1513671875, 0.17578125] x [0.0947265625, 0.7333984375]
    - student   range():  T W N D R N W E H I S M B H U H A M K N K G Q R W Y ...
    - reference range():  V T D X H V B K U B R U D N P W I B Q P B Q L J Q N ...

==> FAILED

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 2 of 10000
    - sequence of points inserted:
      A  1.0 0.5
      B  0.25 0.75
      C  1.0 1.0
      D  0.5 0.0
      E  0.5 0.75
      F  0.0 0.5
      G  0.25 0.25
      H  0.75 0.0
      I  0.0 0.75
      J  0.5 0.25
    - query point                   = (0.25, 1.0)
    - student   nearest()           = (0.5, 0.75)
    - reference nearest()           = (0.25, 0.75)
    - student   distanceSquaredTo() = 0.125
    - reference distanceSquaredTo() = 0.0625

  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 2 of 10000
    - query point                   = (0.90625, 0.625)
    - student   nearest()           = (0.9375, 0.6875)
    - reference nearest()           = (0.875, 0.625)
    - student   distanceSquaredTo() = 0.0048828125
    - reference distanceSquaredTo() = 0.0009765625

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 180 of 10000
    - query point                   = (0.00634765625, 0.039886474609375)
    - student   nearest()           = (0.0153350830078125, 0.03375244140625)
    - reference nearest()           = (0.0052490234375, 0.037017822265625)
    - student   distanceSquaredTo() = 0.000118400203064
    - reference distanceSquaredTo() = 0.000009436160326

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
    - failed on trial 3 of 10000
    - query point                   = (0.1875, 0.8125)
    - student   nearest()           = (0.25, 0.8125)
    - reference nearest()           = (0.1875, 0.8125)
    - student   distanceSquaredTo() = 0.00390625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 5 of 10000
    - query point                   = (0.28125, 0.2578125)
    - student   nearest()           = (0.28125, 0.25)
    - reference nearest()           = (0.28125, 0.2578125)
    - student   distanceSquaredTo() = 0.00006103515625
    - reference distanceSquaredTo() = 0

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 2 of 10000
    - query point                   = (0.2724609375, 0.6005859375)
    - student   nearest()           = (0.265625, 0.591796875)
    - reference nearest()           = (0.275390625, 0.5966796875)
    - student   distanceSquaredTo() = 0.000123977661133
    - reference distanceSquaredTo() = 0.00002384185791

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.23, 0.46)
    - student   nearest()           = (0.2, 0.3)
    - reference nearest()           = (0.2, 0.3)
    - student   distanceSquaredTo() = 0.0265
    - reference distanceSquaredTo() = 0.0265
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A E B D C
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B D C

  * input10.txt
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.32, 0.43)
    - student   nearest()           = (0.372, 0.497)
    - reference nearest()           = (0.372, 0.497)
    - student   distanceSquaredTo() = 0.007193
    - reference distanceSquaredTo() = 0.007193
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B H I G C D
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A C D B H I G

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 6 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.75 0.5
      B  0.25 0.625
      C  0.5 0.125
      D  0.125 0.875
      E  0.625 0.0
    - query point                   = (0.0, 0.25)
    - student   nearest()           = (0.25, 0.625)
    - reference nearest()           = (0.25, 0.625)
    - student   distanceSquaredTo() = 0.203125
    - reference distanceSquaredTo() = 0.203125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B D C
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B C D

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.4375 1.0
      B  0.125 0.625
      C  0.0 0.0
      D  0.5 0.5625
      E  0.1875 0.9375
      F  1.0 0.875
      G  0.0625 0.8125
      H  0.25 0.4375
      I  0.875 0.0625
      J  0.5625 0.25
    - query point                   = (0.75, 0.375)
    - student   nearest()           = (0.5625, 0.25)
    - reference nearest()           = (0.5625, 0.25)
    - student   distanceSquaredTo() = 0.05078125
    - reference distanceSquaredTo() = 0.05078125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A D F I J B
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A D I J F

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted:
      A  0.4375 0.96875
      B  0.5625 0.15625
      C  0.375 0.28125
      D  0.21875 0.1875
      E  0.75 0.34375
      F  0.875 0.75
      G  1.0 0.59375
      H  0.28125 0.0
      I  0.46875 0.53125
      J  0.125 0.5625
      K  0.53125 0.84375
      L  0.0625 0.46875
      M  0.03125 0.3125
      N  0.3125 0.625
      O  0.96875 0.875
      P  0.84375 0.125
      Q  0.09375 0.0625
      R  0.59375 0.21875
      S  0.0 0.5
      T  0.1875 0.375
    - query point                   = (0.90625, 0.09375)
    - student   nearest()           = (0.84375, 0.125)
    - reference nearest()           = (0.84375, 0.125)
    - student   distanceSquaredTo() = 0.0048828125
    - reference distanceSquaredTo() = 0.0048828125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B E F G I R P C
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo():
      A B P E F G

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 17
    - number of reference entries = 7
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.671875, 0.796875)
    - reference entry 1 = (0.234375, 0.0625)

  * 50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 28
    - number of reference entries = 6
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.765625, 0.1640625)
    - reference entry 1 = (0.21875, 0.1953125)

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 1 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 47
    - number of reference entries = 20
    - entry 2 of the two sequences are not equal
    - student   entry 2 = (0.3955078125, 0.9912109375)
    - reference entry 2 = (0.9697265625, 0.31591796875)

==> FAILED

Test 7: insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed

Test 8a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 8b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 27 of 20000
    - student   nearest()  = (0.4375, 0.5)
    - reference nearest()  = (0.0625, 0.25)
    - student   distanceSquaredTo() = 0.2265625
    - reference distanceSquaredTo() = 0.0078125

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 157 of 20000
    - rectangle = [0.125, 0.6328125] x [0.3515625, 0.8125]
    - student   range():  N Q W S G M E P R V
    - reference range():  N W V R Q E P W S M G

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 982 of 20000
    - rectangle = [0.19921875, 0.5400390625] x [0.6611328125, 0.9208984375]
    - student   range():  K M A M M Y H P Z R W T A I Q N Q M L R W L A E S
    - reference range():  K A E S M W L A Q M L R M Z Q N R A I W R T M P Y H

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 945 of 20000
    - rectangle = [0.3336181640625, 0.4249267578125] x [0.1845703125, 0.5228271484375]
    - student   range():  O C V I H D V I J W T
    - reference range():  H I T J W C V D V I O C

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> FAILED

Test 8c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 21 of 20000
    - student   nearest()  = (1.0, 1.0)
    - reference nearest()  = (0.0, 1.0)
    - student   distanceSquaredTo() = 1
    - reference distanceSquaredTo() = 0
    - sequence of operations was:
           st.insert(1.0, 1.0)
           st.range([1.0, 1.0] x [0.0, 1.0])  ==>  K
           st.insert(0.0, 1.0)
           st.contains((0.0, 1.0))  ==>  true
           st.nearest((1.0, 1.0))   ==>  (1.0, 1.0)
           st.contains((1.0, 0.0))  ==>  false
           st.nearest((0.0, 0.0))   ==>  (0.0, 1.0)
           st.insert(1.0, 1.0)
           st.range([0.0, 1.0] x [0.0, 0.0])  ==>  empty
           st.nearest((1.0, 0.0))   ==>  (1.0, 1.0)
           st.insert(1.0, 1.0)
           st.contains((0.0, 1.0))  ==>  true
           st.contains((1.0, 0.0))  ==>  false
           st.contains((1.0, 0.0))  ==>  false
           st.insert(1.0, 1.0)
           st.contains((0.0, 0.0))  ==>  false
           st.nearest((0.0, 0.0))   ==>  (0.0, 1.0)
           st.range([0.0, 0.0] x [0.0, 0.0])  ==>  empty
           st.insert(1.0, 1.0)
           st.insert(1.0, 0.0)
           st.nearest((0.0, 1.0))   ==>  (1.0, 1.0)

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 19 of 20000
    - student   size() = 7
    - reference size() = 6
    - sequence of operations was:
           st.insert(0.3125, 0.3125)
           st.contains((0.5, 0.0))  ==>  false
           st.contains((0.8125, 1.0))  ==>  false
           st.nearest((0.0, 0.9375))   ==>  (0.3125, 0.3125)
           st.insert(0.5, 0.4375)
           st.isEmpty()  ==>  false
           st.nearest((0.3125, 0.6875))   ==>  (0.5, 0.4375)
           st.insert(0.75, 0.8125)
           st.insert(0.125, 0.25)
           st.insert(0.4375, 0.6875)
           st.contains((0.8125, 0.875))  ==>  false
           st.range([0.5, 1.0] x [0.0, 0.8125])  ==>  P I
           st.contains((0.5, 0.1875))  ==>  false
           st.contains((0.5625, 1.0))  ==>  false
           st.insert(0.0, 0.375)
           st.insert(0.5, 0.4375)
           st.nearest((0.8125, 0.0625))   ==>  (0.5, 0.4375)
           st.range([0.25, 0.9375] x [0.25, 0.9375])  ==>  D X I B
           st.size()  ==>  7

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 201 of 20000
    - rectangle = [0.1875, 0.484375] x [0.25, 0.6328125]
    - student   range():  F Z M T H K
    - reference range():  R K F T H Z M

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 1053 of 20000
    - student   size() = 297
    - reference size() = 296

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6281 of 20000
    - rectangle = [0.2095947265625, 0.9405517578125] x [0.3458251953125, 0.9603271484375]
    - student   range():  S I Q V B A L V V L I P M Y K D B M H P X F R V V L ...
    - reference range():  H M R P Q O Z D G Z W Y L A I S C R V K C G S D I Q ...

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6580 of 20000
    - rectangle = [0.525146484375, 0.9029998779296875] x [0.0283966064453125, 0.80975341796875]
    - student   range():  I C X E B K K A S W L I A V H T V P Y J G P U B D Y ...
    - reference range():  I T U G H X B N H Q Z A T N Z C Z M M Q A W H J F S ...

==> FAILED

Test 9: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
  * 1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
==> passed

Test 10: check that two KdTree objects can be created at the same time
==> passed

Test 11: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed


Total: 17/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                264
=> passed        2          336                360
=> passed        5          624                648
=> passed       10         1104               1128
=> passed       25         2544               2568
=> passed      100         9744               9768
=> passed      400        38544              38568
=> passed      800        76944              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 144.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          288                160
=> passed        2          552                288
=> passed        5         1008                672
=> passed       10         1768               1312
=> passed       25         4048               3232
=> passed      100        15448              12832
=> passed      400        61048              51232
=> passed      800       121848             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 152.02 n + 236.39  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     885861
=> passed   320000     851072
=> passed   640000     736459
=> passed  1280000     670223
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     281867
=> passed   320000     273753
=> passed   640000     249985
=> passed  1280000     231210
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5004
=> passed    20000       1749
=> passed    40000        695
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4523
=> passed    20000       2111
=> passed    40000        818
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     563190               1.5              48.0              45.5              21.6
=> passed   320000     536608               1.5              48.8              46.3              22.0
=> passed   640000     453913               1.5              51.8              49.3              23.5
=> passed  1280000     399556               1.5              56.0              53.5              25.6
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     385056              18.5              17.5              18.0
=> passed    20000     384043              19.7              18.7              19.2
=> passed    40000     353782              21.8              20.8              21.3
=> passed    80000     317353              22.0              21.0              21.5
=> passed   160000     346159              23.2              22.2              22.7
=> passed   320000     238983              25.0              24.0              24.5
=> passed   640000     202587              25.7              24.7              25.2
=> passed  1280000     194445              27.2              26.2              26.7
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     231533               0.0              31.1              81.9              42.5
=> passed    20000     224846               0.0              32.6              85.9              48.8
=> passed    40000     192528               0.0              39.3             103.2              52.7
=> passed    80000     246583               0.0              40.7             106.5              55.0
=> passed   160000     146563               0.0              42.5             113.1              63.2
=> passed   320000     135320               0.0              40.2             105.7              55.7
=> passed   640000     120722               0.0              43.3             113.8              62.6
=> passed  1280000     151882               0.0              47.0             123.0              60.1
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000    96352                 147.5                  210.6                   439.1             449.0
=> FAILED    20000    64306                 255.3                  362.1   (1.2x)          744.3             758.6
=> FAILED    40000    40582                 279.8                  397.4   (1.3x)          833.6             836.3
=> FAILED    80000    24358   (0.8x)        444.6                  627.8   (2.1x)         1289.0   (1.6x)   1317.4   (1.6x)
=> FAILED   160000    17712   (0.6x)        500.2                  706.9   (2.4x)         1490.5   (1.9x)   1449.6   (1.8x)
=> FAILED   320000    12165   (0.6x)        614.8                  867.0   (2.9x)         1771.0   (2.2x)   1812.6   (2.3x)
=> FAILED   640000     5377   (0.3x)       1144.3   (1.9x)        1604.5   (5.3x)         3273.9   (4.1x)   3340.2   (4.2x)
=> FAILED  1280000     5122   (0.3x)       1610.8   (2.7x)        2254.4   (7.5x)         4562.4   (5.7x)   4611.4   (5.8x)
==> 1/8 tests passed



Total: 21/28 tests passed!


================================================================





25 October 2018 at 8:19 PMSubmitted at: October 25, 10:19 AM PDT
10/100Score: 10 of 100
NoAssignment not passed

25 October 2018 at 8:15 PMSubmitted at: October 25, 10:15 AM PDT
10/100Score: 10 of 100
NoAssignment not passed

25 October 2018 at 8:12 PM